前端规范

frontend/
├── src/
│   ├── components/           # 组件目录
│   │   ├── common/          # 通用组件
│   │   │   ├── Button/      
│   │   │   │   ├── index.tsx
│   │   │   │   ├── Button.types.ts
│   │   │   │   ├── Button.styles.ts
│   │   │   │   └── Button.test.tsx     # 测试文件直接和源码放一起
│   │   │   ├── Form/
│   │   │   │   ├── index.tsx
│   │   │   │   ├── Form.types.ts
│   │   │   │   └── Form.test.tsx
│   │   │   └── Layout/
│   │   │       ├── index.tsx
│   │   │       ├── Layout.types.ts
│   │   │       └── Layout.test.tsx
│   │   └── business/        # 业务组件
│   │       ├── Chat/
│   │       │   ├── index.tsx
│   │       │   ├── Chat.types.ts
│   │       │   ├── Chat.test.tsx
│   │       │   ├── components/     # 子组件
│   │       │   │   └── ChatInput/
│   │       │   │       ├── index.tsx
│   │       │   │       └── ChatInput.test.tsx
│   │       │   └── hooks/          # 组件专用钩子
│   │       │       ├── useChat.ts
│   │       │       └── useChat.test.ts
│   │       ├── Profile/
│   │       │   ├── index.tsx
│   │       │   └── Profile.test.tsx
│   │       └── Models/
│   │           ├── index.tsx
│   │           └── Models.test.tsx
│   ├── pages/               # 页面组件
│   │   ├── home/
│   │   │   ├── index.tsx
│   │   │   ├── Home.types.ts
│   │   │   └── Home.test.tsx
│   │   ├── chat/
│   │   │   ├── index.tsx
│   │   │   └── Chat.test.tsx
│   │   ├── models/
│   │   │   ├── index.tsx
│   │   │   └── Models.test.tsx
│   │   └── profile/
│   │       ├── index.tsx
│   │       └── Profile.test.tsx
│   ├── hooks/               # 全局钩子
│   │   ├── useChat.ts
│   │   ├── useAuth.ts
│   │   └── __tests__/       # 通用钩子的测试集中管理
│   │       ├── useChat.test.ts
│   │       └── useAuth.test.ts
│   ├── services/           # API服务
│   │   ├── api.ts
│   │   ├── auth.ts
│   │   ├── chat.ts
│   │   └── types/         # API类型定义
│   │       ├── index.ts
│   │       ├── api.types.ts
│   │       └── response.types.ts
│   ├── store/             # 状态管理
│   │   ├── index.ts
│   │   ├── slices/
│   │   │   ├── auth.slice.ts
│   │   │   └── chat.slice.ts
│   │   └── types/        # Store类型定义
│   │       └── store.types.ts
│   ├── utils/            # 工具函数
│   │   ├── format.ts
│   │   ├── validate.ts
│   │   └── __tests__/    # 工具函数的测试集中管理
│   │       ├── format.test.ts
│   │       └── validate.test.ts
│   ├── types/           # 全局类型定义
│   │   ├── index.ts     # 统一导出
│   │   ├── api.types.ts
│   │   └── models.types.ts
│   ├── theme/           # 主题配置
│   │   ├── index.ts
│   │   └── theme.types.ts
│   ├── App.tsx
│   └── routes.tsx
├── test/               # 测试配置与通用测试目录
│   ├── __tests__/     # 通用测试配置和工具
│   │   ├── setupTests.ts  # 测试环境配置
│   │   └── testUtils.ts   # 通用测试工具函数
│   └── __mocks__/     # Mock 服务和数据
│       ├── apiMocks.ts    # API Mock 数据
│       └── userMocks.ts   # 用户相关 Mock 数据
└── jest.config.ts     # Jest 主配置文件
```

1. 技术栈规范
框架: React@18.2.0
语言: TypeScript@5.3.3
样式库: MUI@5.16.9
状态管理:
全局状态: Redux Toolkit
局部状态: Zustand
2. UI/UX规范
组件设计:
组件应遵循单一职责原则，避免过于复杂。
组件应具备可复用性，支持不同场景的使用。
响应式布局:
使用Flexbox和Grid布局，确保在不同设备上的良好展示。
设计时考虑不同屏幕尺寸，确保良好的用户体验。
主题与样式系统:
使用MUI主题系统，统一颜色、字体和间距。
组件样式应与主题保持一致，支持动态主题切换。
3. React开发规范
组件拆分:
组件应根据功能进行拆分，避免单一组件过于庞大。
使用容器组件和展示组件的模式，分离逻辑与视图。
Props和State使用:
Props应定义类型，使用TypeScript进行类型检查。
State应尽量简化，避免不必要的状态管理。
Hooks使用规则:
自定义Hooks应遵循命名规则，以“use”开头。
避免在条件语句中调用Hooks，确保Hooks的调用顺序一致。
4. 状态管理规范
Redux使用:
使用Redux Toolkit简化状态管理，按功能模块拆分slice。
使用createSlice创建slice，统一导出actions和reducers。
Zustand使用:
适用于局部状态管理，避免过度使用。
使用createStore创建store，确保状态的可追踪性。
5. 路由管理规范
路由结构设计:
使用React Router进行路由管理，确保路由的清晰性。
路由应支持懒加载，优化首屏加载时间。
路由权限控制:
对需要鉴权的路由进行保护，确保用户权限的正确性。
6. 性能优化
加载优化:
使用懒加载和代码拆分，减少初始加载时间。
采用图片懒加载技术，提升页面加载速度。
渲染优化:
使用React.memo和useMemo避免不必要的重渲染。
对长列表使用虚拟滚动技术，提升渲染性能。
7. 安全机制
XSS防护:
对用户输入进行严格的验证和过滤，防止恶意脚本注入。
CSRF防护:
使用CSRF Token进行请求验证，确保请求的合法性。
敏感信息处理:
不在前端暴露敏感信息，如API密钥等。
8. 错误处理规范
错误边界使用:
使用React的错误边界组件捕获子组件的错误，提供友好的用户提示。
全局错误处理:
统一处理API请求错误，提供用户友好的错误信息。
9. 测试规范
组件测试:
使用Jest和React Testing Library进行组件单元测试，确保组件功能的正确性。
覆盖率要求:
组件测试覆盖率应达到80%以上，确保关键逻辑的测试。
10. 版本控制规范
提交信息格式:
使用规范化的提交信息格式，如“feat”、“fix”、“docs”等。
分支命名:
使用“feature/xxx”、“bugfix/xxx”等命名规则，确保分支的清晰性。