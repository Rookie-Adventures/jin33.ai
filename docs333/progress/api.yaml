openapi: 3.0.3
info:
  title: Jin33.ai API
  description: API documentation for Jin33.ai backend services
  version: 1.0.0
  contact:
    name: Jin33.ai Support
    email: support@jin33.ai

tags:
  - name: Auth
    description: Authentication operations
  - name: Chat
    description: Chat operations
  - name: Order
    description: Order management operations
  - name: Spread
    description: Price spread operations

paths:
  # Auth APIs
  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 20
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum: [SUCCESS]
                  message:
                    type: string
                    example: "注册成功"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum: [SUCCESS]
                  message:
                    type: string
                    example: "登录成功"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIs..."
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'

  # Chat APIs
  /api/chat/conversations:
    get:
      summary: Get conversation list
      description: Get the list of user's conversations
      tags:
        - Chat
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "获取对话列表成功"
                  data:
                    type: object
                    properties:
                      conversations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Conversation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/chat/conversations/{id}:
    get:
      summary: Get conversation details
      description: Get details of a specific conversation
      tags:
        - Chat
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved conversation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "获取对话详情成功"
                  data:
                    type: object
                    properties:
                      conversation:
                        $ref: '#/components/schemas/Conversation'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Order APIs
  /api/orders:
    post:
      summary: Create new order
      description: Create a new order for the user
      tags:
        - Order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  minimum: 0
                  example: 100
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "充值成功"
                  data:
                    type: object
                    properties:
                      order:
                        $ref: '#/components/schemas/Order'

  # Spread APIs
  /api/spread/price:
    post:
      summary: Update price data
      description: Update price data for a trading pair
      tags:
        - Spread
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceData'
      responses:
        '200':
          description: Price data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum: [SUCCESS]
                  message:
                    type: string
                    example: "价格数据更新成功"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        balance:
          type: number
          example: 0
        lastLoginAt:
          type: string
          format: date-time
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          example: "507f1f77bcf86cd799439011"
        modelId:
          type: string
          example: "gpt-4"
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        content:
          type: string
          example: "Hello, how can I help you?"
        role:
          type: string
          enum: [user, assistant]
          example: "assistant"
        timestamp:
          type: string
          format: date-time
        tokens:
          type: number
          example: 10

    Order:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        userId:
          type: string
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          example: 100
        status:
          type: string
          enum: [pending, completed, failed]
          example: "completed"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PriceData:
      type: object
      required:
        - symbol
        - price
        - source
      properties:
        symbol:
          type: string
          example: "BTC/USDT"
        price:
          type: number
          example: 50000
        source:
          type: string
          example: "binance"
        timestamp:
          type: string
          format: date-time

    ValidationError:
      type: object
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR]
        message:
          type: string
          example: "验证失败"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    AuthError:
      type: object
      properties:
        code:
          type: string
          enum: [AUTHENTICATION_ERROR]
        message:
          type: string
          example: "用户名或密码错误"

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'

    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "资源不存在"
