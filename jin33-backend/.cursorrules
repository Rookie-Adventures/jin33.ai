后端规范

应用层架构：
┌─────────────┐
│   Routes    │ 路由层：URL映射，请求解析
├─────────────┤
│ Controllers │ 控制层：请求处理，响应封装
├─────────────┤
│  Services   │ 服务层：业务逻辑，事务处理
├─────────────┤
│   Models    │ 数据：数据访问，模型定义
└─────────────┘

领域模型：
┌─────────────┐
│    Types    │ 类型层：接口，类型定义
├─────────────┤
│    DTOs     │ 传输层：数据传输对象
├─────────────┤
│  Entities   │ 实体层：领域实体
└─────────────┘

基础设施：
┌─────────────┐
│    Utils    │ 工具层：通用工具，辅助函数
├─────────────┤
│ Middleware  │ 中间件：拦截器，中间件
├─────────────┤
│   Config    │ 配置层：环境配置，常量定义
└─────────────┘
```

#### 1.3 模块划分
- **核心模块**：
  * `auth`: 认证授权
  * `user`: 用户管理
  * `chat`: 聊天功能
  * `model`: 模型管理
  * `order`: 订单管理

- **基础设施**：
  * `common`: 通用功能
  * `config`: 配置管理
  * `utils`: 工具函数
  * `types`: 类型定义

### 2. 目录结构
```
backend/
├── src/
│   ├── config/           # 配置模块
│   │   ├── index.ts     # 统一导出配置
│   │   ├── app.config.ts # 应用配置
│   │   └── db.config.ts  # 数据库配置
│   ├── controllers/     # 控制器模块
│   │   ├── auth.controller.ts          # 处理与认证相关的请求
│   │   └── __tests__/                   # 控制器测试文件夹
│   │       └── auth.controller.test.ts  # 控制器测试
│   ├── services/       # 服务模块
│   │   ├── auth.service.ts                # 处理与认证相关的业务逻辑
│   │   └── __tests__/                     # 服务测试文件夹
│   │       └── auth.service.test.ts      # 服务测试
│   ├── models/         # 数据模型模块
│   │   ├── user.model.ts                    # 用户数据模型定义
│   │   └── __tests__/                       # 模型测试文件夹
│   │       └── user.model.test.ts          # 模型测试
│   ├── routes/         # 路由模块
│   │   ├── auth.routes.ts                    # 定义与认证相关的路由
│   │   └── __tests__/                        # 路由测试文件夹
│   │       └── auth.routes.test.ts          # 路由测试
│   ├── utils/          # 工具模块
│   │   ├── response.ts                         # 处理响应的工具函数
│   │   └── __tests__/                         # 工具函数测试文件夹
│   │       └── response.test.ts               # 工具函数测试
│   ├── types/          # 类型定义模块
│   │   ├── index.ts    # 统一导出类型
│   │   └── api.response.types.ts               # API 响应类型定义
│   ├── middleware/     # 中间件模块
│   │   ├── auth.middleware.ts                  # 处理认证相关的中间件
│   │   └── __tests__/                          # 中间件测试文件夹
│   │       └── auth.middleware.test.ts        # 中间件测试
│   └── app.ts         # 应用入口文件
├── test/               # 测试配置与通用测试目录
│   ├── __tests__/     # 通用测试配置和工具
│   │   ├── setupTests.ts  # 测试环境配置
│   │   └── testUtils.ts   # 通用测试工具函数
│   └── __mocks__/     # Mock 服务和数据
│       ├── apiMocks.ts    # API Mock 数据
│       └── userMocks.ts   # 用户相关 Mock 数据
└── jest.config.ts     # Jest 主配置文件

###  类型系统规范
####  静态工具类
```typescript
// 工具类接口定义
interface IStaticUtil {
  new(): never;  // 防止实例化
  // 静态方法定义
}

// 工具类实现
class StaticUtil implements IStaticUtil {
  private constructor() {}  // 防止实例化
  // 静态方法实现
}
```
###  模块声明规范
- **全局声明文件** (`global.d.ts`):
  * 使用绝对路径模块声明（如 `@utils/response`）
  * 避免在声明文件中使用相对路径导入
  * 直接在模块声明中定义类型，而不是导入
  ```typescript
  declare module '@utils/response' {
    import { Response } from 'express';
    
    interface TApiResponse<T = unknown> {
      success: boolean;
      data?: T;
      error?: {
        code: string;
        message: string;
      };
    }

    interface IResponseUtil {
      success<T>(res: Response, data: T): Response;
      error(res: Response, code: string, status?: number, message?: string): Response;
    }
    
    const ResponseHandler: IResponseUtil;
    export { ResponseHandler, TApiResponse };
  }

  ``` **类型收敛**：
  * 相关类型放在同一文件
  * 避免类型分散
  * 使用类型组而不是重复定义

- **类型复用**：
  * 使用泛型提高复用性
  * 使用工具类型转换现有类型
  * 避免重复定义相似类型

- **类型安全**：
  * 避免使用 `any`
  * 使用类型收窄
  * 添加适当的类型守卫
```  
1. 技术栈规范
语言: Node.js@22.12.0
框架: Express@4.21.2
数据库: MongoDB@7.0.4
缓存: Redis@7.2.3
API文档: Swagger/OpenAPI

2. 微服务架构规范
微服务设计:
将系统功能模块（如用户管理、对话管理、支付系统等）独立部署为微服务，确保可扩展性和可维护性。
每个服务通过RESTful API或GraphQL进行交互，解耦各个模块之间的依赖关系。
服务容器化与部署:
使用Docker进行服务容器化，确保服务在不同环境下可扩展、可复用。
使用Kubernetes进行服务编排和管理，实现自动部署和扩展。

3. API设计规范
RESTful API设计:
遵循RESTful原则，使用HTTP动词（GET、POST、PUT、DELETE）进行操作。
资源路径应简洁明了，使用复数形式表示资源集合。
请求与响应格式:
统一请求和响应格式，使用JSON作为数据交换格式。
规范化错误码，提供详细的错误信息。

4. 数据库设计规范
数据建模:
使用合适的索引策略，优化查询性能。
设计合理的数据库结构，避免数据冗余。
数据访问层:
使用ORM（如Mongoose）进行数据库操作，简化数据访问逻辑。
采用Repository模式，封装数据访问逻辑。

5. 性能优化
请求优化:
实现请求参数校验、数据过滤和安全防护（防注入、参数校验等）。
使用请求去重合并、批量请求优化、请求压缩等技术。
缓存策略:
使用Redis进行热点数据缓存，减少数据库访问压力。
设计合理的缓存失效策略，确保数据一致性。
异步处理:
使用消息队列（如RabbitMQ、Kafka）处理异步任务，提升系统响应能力。
对耗时操作进行异步处理，避免阻塞主线程。

6. 安全机制
身份验证与授权:
使用JWT进行用户身份验证，确保API的安全性。
实现角色权限控制，确保用户只能访问其有权限的资源。
数据安全:
对敏感数据进行加密存储，确保数据安全。
实现输入验证和数据净化，防止SQL注入和XSS攻击。
访问控制:
实现IP限制、设备指纹、行为分析等安全措施。
采用多因素认证，增强用户账户的安全性。

7. 日志与监控
日志管理:
记录请求日志、错误日志和性能日志，便于后期分析和排查问题。

使用集中式日志管理工具（如ELK Stack）进行日志分析。
监控与告警:
实时监控API性能、错误率和资源使用情况。
设置阈值告警，及时发现并处理异常情况。
8. 版本控制规范
提交信息格式:
使用规范化的提交信息格式，如“feat”、“fix”、“docs”等。
分支命名:
使用“feature/xxx”、“bugfix/xxx”等命名规则，确保分支的清晰性。